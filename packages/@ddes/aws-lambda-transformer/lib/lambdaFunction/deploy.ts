/**
 * @module @ddes/aws-lambda-transformer
 */

import {IAM, Lambda, S3} from 'aws-sdk'
import {realpath as realpathClassic} from 'fs'
import * as path from 'path'
import {PassThrough} from 'stream'
import {promisify} from 'util'
import {LambdaTransformerConfig} from '../types'

/**
 * @hidden
 */
const realpath = promisify(realpathClassic)

/**
 * @hidden
 */
export default async function deploy(
  id: string,
  transformationPath: string,
  config: LambdaTransformerConfig
) {
  const {
    awsConfig,
    fileRoot = process.cwd(),
    files = [],
    ignoreFiles,
    memorySize = 128,
    timeout = 60,
    environment = {},
  } = config

  const archiver = require('archiver')
  const glob = promisify(require('glob'))

  const baseFiles = [
    'node_modules/@ddes/core/**',
    'node_modules/@ddes/*-store/**',
    'node_modules/@ddes/store-transformations/**',
    'node_modules/@ddes/aws-lambda-transformer/**',
    'node_modules/fast-deep-equal/**',
    'node_modules/semver/**',
    'node_modules/debug/**',
    'node_modules/ms/**',
    transformationPath,
  ]

  const s3 = new S3(awsConfig)
  await s3.createBucket({Bucket: id}).promise()
  const zip = archiver('zip', {zlib: {level: 1}})
  const uploadStream = new PassThrough()
  const relativeFilePaths: Set<string> = new Set()

  for (const filePattern of [...baseFiles, ...files]) {
    const filePaths = await glob(filePattern, {
      cwd: fileRoot,
      dot: true,
      silent: true,
      follow: false,
      nodir: true,
      ignore: ignoreFiles,
    })
    for (const filePath of filePaths) {
      relativeFilePaths.add(filePath)
    }
  }

  for (const relativePath of relativeFilePaths) {
    const fullPath = path.resolve(fileRoot, relativePath)
    zip.file(await realpath(fullPath), {name: relativePath})
  }

  zip.pipe(uploadStream)

  const uploadPromise = s3
    .upload({Bucket: id, Key: 'transformationFunction.zip', Body: uploadStream})
    .promise()

  zip.finalize()

  await uploadPromise

  const lambda = new Lambda(awsConfig)
  const iam = new IAM(awsConfig)

  const {
    Role: {Arn: Role},
  } = await iam
    .createRole({
      RoleName: id,
      AssumeRolePolicyDocument: JSON.stringify({
        Version: '2012-10-17',
        Statement: [
          {
            Effect: 'Allow',
            Principal: {
              Service: ['lambda.amazonaws.com'],
            },
            Action: ['sts:AssumeRole'],
          },
        ],
      }),
    })
    .promise()

  const accountId = Role.split(':')[4]

  try {
    let lambdaFunction = null
    let attempt = 0
    while (true) {
      attempt++

      try {
        lambdaFunction = await lambda
          .createFunction({
            Code: {S3Bucket: id, S3Key: 'transformationFunction.zip'},
            FunctionName: id,
            Description: 'generated by @ddes/aws-store-transformer',
            Handler:
              'node_modules/@ddes/aws-lambda-transformer/index.lambdaHandler',
            MemorySize: memorySize,
            Role,
            Runtime: 'nodejs8.10',
            Timeout: timeout,
            Environment: {
              Variables: {
                ...environment,
                TRANSFORMATION_PATH: transformationPath,
              },
            },
            Publish: true,
          })
          .promise()
        break
      } catch (error) {
        if (
          !(error.code === 'InvalidParameterValueException') ||
          attempt >= 30
        ) {
          throw error
        }

        await new Promise(resolve => setTimeout(resolve, 500))
      }
    }
  } catch (error) {
    await iam.deleteRole({RoleName: id}).promise()
    throw error
  }
}
